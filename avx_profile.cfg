#!/bin/bash

BIN_PATH_APT=`which apt`
BIN_PATH_CAT=`which cat`
BIN_PATH_CD=`which cd`
BIN_PATH_CSPLIT=`which csplit`
BIN_PATH_CURL=`which curl`
BIN_PATH_DATE=`which DATE`
BIN_PATH_ECHO=`which echo`
BIN_PATH_GREP=`which grep`
BIN_PATH_GZIP=`which gzip`
BIN_PATH_HTPDATE=`which htpdate`
BIN_PATH_JQ=`which jq`
BIN_PATH_MKDIR=`which mkdir`
BIN_PATH_OPENSSL=`which openssl`
BIN_PATH_PIP=`which pip`
BIN_PATH_PYTHON3=`which python3`
BIN_PATH_SQLITE3=`which sqlite3`
BIN_PATH_SUDO=`which sudo`
BIN_PATH_SYSTEMCTL=`which systemctl`
BIN_PATH_TAIL=`which tail`
BIN_PATH_TOUCH=`which touch`
BIN_PATH_UPDATE_CA_CERTS=`which update-ca-certificates`
BIN_PATH_VIM=`which vim`
BIN_PATH_ZGREP=`which zgrep`

if [ -e /etc/localgateway/controller.cfg ]; then
  NODE_NAME=controller
else
  NODE_NAME=`${BIN_PATH_SUDO} ${BIN_PATH_JQ} -r .gateway_name /etc/localgateway/gateway.cfg`
fi

SPIRE_WL_SVID=/opt/spire-gateway/certs/${NODE_NAME}.crt
SPIRE_WL_CA_SVID=/opt/spire-gateway/certs/${NODE_NAME}-bundle.crt
SPIRE_WL_KEY=/opt/spire-gateway/certs/${NODE_NAME}.key
SPIRE_AGENT_SVID=/opt/spire-gateway/data/agent/agent_svid.der
SPIRE_AGENT_CA_SVID=/opt/spire-gateway/data/agent/bundle.der
SPIRE_AGENT_KEY=/opt/spire-gateway/data/agent/svid.key
SSL_CERT=/etc/ssl/certs/${NODE_NAME}.crt
SSL_CA_CERT=/usr/local/share/ca-certificates/ca.crt
SSL_KEY=/etc/ssl/private/${NODE_NAME}.key

_REPO_URL_PREFIX='https://raw.githubusercontent.com/dzhou3/utils/main'
_PY_SPIRE_DB="`${BIN_PATH_CURL} --silent --cacert /etc/ssl/certs/ca-certificates.crt ${_REPO_URL_PREFIX}/spire_db.py`"
_PY_GET_AGENT_SVID="`${BIN_PATH_CURL} --silent --cacert /etc/ssl/certs/ca-certificates.crt ${_REPO_URL_PREFIX}/get_agent_svid.py`"
_PY_GET_WL_SVID="`${BIN_PATH_CURL} --silent --cacert /etc/ssl/certs/ca-certificates.crt ${_REPO_URL_PREFIX}/get_wl_svid.py`"

alias myip='${BIN_PATH_CURL} ipinfo.io/ip'
alias mydate='`${BIN_PATH_DATE} +"[%y-%m-%d %H:%M:%S.%s %Z]"`'
alias spiredb='${BIN_PATH_SQLITE3} -header -column -cmd ".width 0" /opt/spire-controller/data/server/datastore.sqlite3'
alias ipython='${BIN_PATH_PYTHON3} -m IPython'
alias tailsys='${BIN_PATH_TAIL} -F /var/log/syslog'
alias logsys='${BIN_PATH_VIM} /var/log/syslog'
alias statspire='${BIN_PATH_SYSTEMCTL} status spire-controller.service spire-gateway.service --no-pager'
alias tailspire='${BIN_PATH_TAIL} -F /var/log/cloudx/spire/spire-server.log /var/log/cloudx/spire/spire-agent.log'
alias sslcert='${BIN_PATH_OPENSSL} x509 -text -noout -inform PEM -in ${SSL_CERT}'
alias sslcertd='${BIN_PATH_OPENSSL} x509 -startdate -enddate -noout -inform PEM -in ${SSL_CERT}'
alias sslcacert='${BIN_PATH_OPENSSL} x509 -text -noout -inform PEM -in ${SSL_CA_CERT}'
alias sslcacertd='${BIN_PATH_OPENSSL} x509 -startdate -enddate -noout -inform PEM -in ${SSL_CA_CERT}'

alias statspa='${BIN_PATH_SYSTEMCTL} status spire-gateway.service --no-pager'
alias stopspa='${BIN_PATH_SYSTEMCTL} stop spire-gateway.service'
alias startspa='${BIN_PATH_SYSTEMCTL} start spire-gateway.service'
alias restartspa='${BIN_PATH_SYSTEMCTL} restart spire-gateway.service'
alias vispasvc='${BIN_PATH_VIM} /lib/systemd/system/spire-gateway.service'
alias tailspa='${BIN_PATH_TAIL} -F /var/log/cloudx/spire/spire-agent.log'
alias logspa='${BIN_PATH_VIM} /var/log/cloudx/spire/spire-agent.log'
alias cfgspa='${BIN_PATH_VIM} /opt/spire-gateway/conf/agent/agent.conf'
alias envspa='${BIN_PATH_VIM} /etc/default/spire-gateway'

alias statspc='${BIN_PATH_SYSTEMCTL} status spire-controller.service --no-pager'
alias stopspc='${BIN_PATH_SYSTEMCTL} stop spire-controller.service'
alias startspc='${BIN_PATH_SYSTEMCTL} start spire-controller.service'
alias restartspc='${BIN_PATH_SYSTEMCTL} restart spire-controller.service'
alias vispcsvc='${BIN_PATH_VIM} /lib/systemd/system/spire-controller.service'
alias tailspc='${BIN_PATH_TAIL} -F /var/log/cloudx/spire/spire-server.log'
alias logspc='${BIN_PATH_VIM} /var/log/cloudx/spire/spire-server.log'
alias cfgspc='${BIN_PATH_VIM} /opt/spire-controller/conf/server/server.conf'
alias ttlspc='${BIN_PATH_VIM} /opt/spire-controller/conf/server/custom_data.json'
alias envspc='${BIN_PATH_VIM} /etc/default/spire-controller'

alias stathlp='${BIN_PATH_SYSTEMCTL} status apache-spiffe-helper.service --no-pager'
alias stophlp='${BIN_PATH_SYSTEMCTL} stop apache-spiffe-helper.service'
alias starthlp='${BIN_PATH_SYSTEMCTL} start apache-spiffe-helper.service'
alias restarthlp='${BIN_PATH_SYSTEMCTL} restart apache-spiffe-helper.service'
alias vihlpsvc='${BIN_PATH_VIM} /lib/systemd/system/apache-spiffe-helper.service'
alias tailhlp='${BIN_PATH_TAIL} -F /var/log/cloudx/commands.log | ${BIN_PATH_GREP} "spiffe-helper"'
alias cfghlp='${BIN_PATH_VIM} /opt/spire-gateway/conf/agent/apache.conf'

alias statavxg='${BIN_PATH_SYSTEMCTL} status avx-gw-state-sync.service --no-pager'
alias stopavxg='${BIN_PATH_SYSTEMCTL} stop avx-gw-state-sync.service'
alias startavxg='${BIN_PATH_SYSTEMCTL} start avx-gw-state-sync.service'
alias restartavxg='${BIN_PATH_SYSTEMCTL} restart avx-gw-state-sync.service'
alias viavxgsvc='${BIN_PATH_VIM} /lib/systemd/system/avx-gw-state-sync.service'
alias tailavxg='${BIN_PATH_TAIL} -F /var/log/cloudx/avx-gw-state-sync.log'
alias logavxg='${BIN_PATH_VIM} /var/log/cloudx/avx-gw-state-sync.log'

alias statavxc='${BIN_PATH_SYSTEMCTL} status avx-ctrl-state-sync.service --no-pager'
alias stopavxc='${BIN_PATH_SYSTEMCTL} stop avx-ctrl-state-sync.service'
alias startavxc='${BIN_PATH_SYSTEMCTL} start avx-ctrl-state-sync.service'
alias restartavxc='${BIN_PATH_SYSTEMCTL} restart avx-ctrl-state-sync.service'
alias viavxcsvc='${BIN_PATH_VIM} /lib/systemd/system/avx-ctrl-state-sync.service'
alias tailavxc='${BIN_PATH_TAIL} -F /var/log/cloudx/avx-ctrl-state-sync.log'
alias logavxc='${BIN_PATH_VIM} /var/log/cloudx/avx-ctrl-state-sync.log'

alias stathttpd='${BIN_PATH_SYSTEMCTL} status apache2.service --no-pager'
alias stophttpd='${BIN_PATH_SYSTEMCTL} stop apache2.service'
alias starthttpd='${BIN_PATH_SYSTEMCTL} start apache2.service'
alias restarthttpd='${BIN_PATH_SYSTEMCTL} restart apache2.service'
alias vihttpdsvc='${BIN_PATH_VIM} /lib/systemd/system/apache2.service'
alias httpd_vhosttime='${BIN_PATH_VIM} /etc/apache2/sites-available/time-ssl.conf'
alias httpd_vhostgw='${BIN_PATH_VIM} /etc/apache2/sites-available/gateway-ssl.conf'
alias httpd_vhostdefault='${BIN_PATH_VIM} /etc/apache2/sites-available/defult-ssl.conf'
alias tailhttpd_all='${BIN_PATH_TAIL} -F /var/log/apache2/*.log'
alias tailhttpd_err='${BIN_PATH_TAIL} -F /var/log/apache2/error.log'
alias tailhttpd_acc='${BIN_PATH_TAIL} -F /var/log/apache2/access.log'
alias loghttpd_err='${BIN_PATH_VIM} /var/log/apache2/error.log'
alias loghttpd_acc='${BIN_PATH_VIM} /var/log/apache2/access.log'

alias statsslh='${BIN_PATH_SYSTEMCTL} status .service --no-pager'
alias stopsslh='${BIN_PATH_SYSTEMCTL} stop .service'
alias startsslh='${BIN_PATH_SYSTEMCTL} start .service'
alias restartsslh='${BIN_PATH_SYSTEMCTL} restart .service'
alias visslhsvc='${BIN_PATH_VIM} /lib/systemd/system/sslh.service'
alias tailsslh='${BIN_PATH_TAIL} -F /var/log/sslh.log'
alias logsslh='${BIN_PATH_VIM} /var/log/sslh.log'
alias vsslhcfg='${BIN_PATH_VIM} /etc/sslh/sslh.cfg'

alias statcdx='${BIN_PATH_SYSTEMCTL} status cloudxd.service --no-pager'
alias stopcdx='${BIN_PATH_SYSTEMCTL} stop cloudxd.service'
alias startcdx='${BIN_PATH_SYSTEMCTL} start cloudxd.service'
alias restartcdx='${BIN_PATH_SYSTEMCTL} restart cloudxd.service'
alias visvccdx='${BIN_PATH_VIM} /lib/systemd/system/cloudxd.service'
alias tailcmd='${BIN_PATH_TAIL} -F /var/log/cloudx/commands.log'
alias tailgui='${BIN_PATH_TAIL} -F /var/log/cloudx/gui.log'
alias logcmd='${BIN_PATH_VIM} /var/log/cloudx/commands.log'
alias loggui='${BIN_PATH_VIM} /var/log/cloudx/gui.log'

#alias _stat='${BIN_PATH_SYSTEMCTL} status .service --no-pager'
#alias _stop='${BIN_PATH_SYSTEMCTL} stop .service'
#alias _start='${BIN_PATH_SYSTEMCTL} start .service'
#alias _restart='${BIN_PATH_SYSTEMCTL} restart .service'
#alias _sysd='${BIN_PATH_VIM} /lib/systemd/system/.service'


mkcd(){
  ${BIN_PATH_MKDIR} -p -- "$1" && ${BIN_PATH_CD} -P -- "$1"
}

mysetup(){
  ${BIN_PATH_SUDO} ${BIN_PATH_APT} update
  ${BIN_PATH_SUDO} ${BIN_PATH_UPDATE_CA_CERTS}
  ${BIN_PATH_SUDO} ${BIN_PATH_APT} install -y git gzip vim tmux jq tldr sqlite3
  ${BIN_PATH_SUDO} ${BIN_PATH_PIP} install ipython
  ${BIN_PATH_CURL} --silent --cacert /etc/ssl/certs/ca-certificates.crt ${_REPO_URL_PREFIX}/.sqliterc -o ${HOME}/.sqliterc
  ${BIN_PATH_CURL} --silent --cacert /etc/ssl/certs/ca-certificates.crt ${_REPO_URL_PREFIX}/.tmux.conf -o ${HOME}/.tmux.conf
  ${BIN_PATH_CURL} --silent --cacert /etc/ssl/certs/ca-certificates.crt ${_REPO_URL_PREFIX}/.vimrc -o ${HOME}/.vimrc

  if [ $1 == "advnace" ]; then
    ${BIN_PATH_SUDO} ${BIN_PATH_PIP} install --upgrade keyrings.alt
    ${BIN_PATH_SUDO} ${BIN_PATH_PIP} install ipython
    # ${BIN_PATH_SUDO} ${BIN_PATH_APT} install -y shellcheck broot rg fzf
  fi
}

_decode_cert(){
  case $2 in
    text)
      ${BIN_PATH_ECHO} "$1" | ${BIN_PATH_OPENSSL} x509 -text -noout
      ;;
    date)
      ${BIN_PATH_ECHO} "$1" | ${BIN_PATH_OPENSSL} x509 -startdate -enddate -noout
      ;;
    *)
      ${BIN_PATH_ECHO} "$1"
      ;;
  esac
}

_agtsvid(){
  case $1 in
    leaf)
      cert=`${BIN_PATH_SUDO} ${BIN_PATH_PYTHON3} -c "${_PY_GET_AGENT_SVID}"`
      ;;
    ica)
      cert=`${BIN_PATH_SUDO} ${BIN_PATH_PYTHON3} -c "${_PY_GET_AGENT_SVID}" --ica`
      ;;
    rca)
      cert=`${BIN_PATH_SUDO} ${BIN_PATH_OPENSSL} x509 -inform DER -outform PEM -in ${SPIRE_AGENT_CA_SVID}`
      ;;
    *)
      ${BIN_PATH_ECHO} "Error! Please chose SVID type from [leaf, ica, rca]"
      return 1
      ;;
  esac
  _decode_cert "${cert}" $2
}

_wlsvid() {
  case $1 in
    leaf)
      cert=`${BIN_PATH_SUDO} ${BIN_PATH_PYTHON3} -c "${_PY_GET_WL_SVID}" --cert_fpath ${SPIRE_WL_SVID}`
      ;;
    ica)
      cert=`${BIN_PATH_SUDO} ${BIN_PATH_PYTHON3} -c "${_PY_GET_WL_SVID}" --cert_fpath ${SPIRE_WL_SVID} --ica`
      ;;
    rca)
      cert=`${BIN_PATH_SUDO} ${BIN_PATH_CAT} ${SPIRE_WL_CA_SVID}`
      ;;
    *)
      ${BIN_PATH_ECHO} "Error! Please chose SVID type from [leaf, ica, rca]"
      return 1
      ;;
  esac
  _decode_cert "${cert}" $2
}

zgrep_agtlog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/cloudx/spire/spire-agent.log*`
}

zgrep_svrlog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/cloudx/spire/spire-server.log*`
}

zgrep_cmdlog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/cloudx/commands.log*`
}

zgrep_avxgwlog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/cloudx/avx-gw-state-sync.log*`
}

zgrep_avxctrllog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/cloudx/avx-ctrl-state-sync.log*`
}

zgrep_errlog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/apache2/error.log*`
}

zgrep_acclog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/apache2/access.log*`
}

zgrep_syslog(){
  PATTERN=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_ZGREP} -i -e "${PATTERN}" `ls -1tr /var/log/syslog*`
}

agtsvid(){
  _agtsvid leaf "$@"
}
agticasvid(){
  _agtsvid ica "$@"
}
agtrcasvid(){
  _agtsvid rca "$@"
}

wlsvid(){
  _wlsvid leaf "$@"
}

wlicasvid(){
  _wlsvid ica "$@"
}

wlrcasvid(){
  _wlsvid rca "$@"
}

get_gw_uuid(){
  # sudo /etc/cloudx/cloudx_cli --rtn_file "/tmp/out-test.txt" uuid_translator -n <gw_name> --login_cid <login_id>
  RTN_FILE=/tmp/.gw_name_2_uuid
  GW_NAMES=$1
  CID=$2
  ${BIN_PATH_SUDO} rm -f ${rtn_file}
  ${BIN_PATH_SUDO} /etc/cloudx/cloudx_cli --rtn_file ${RTN_FILE} uuid_translator -n ${GW_NAMES} --login_cid ${CID}
  ${BIN_PATH_CAT} ${rtn_file}
}

get_tls_server_certs(){
  # e.g: get_remote_tls_server_cert localhost 8081
  SERVER_HOSTNAME=$1
  SERVER_PORT_NUM=$2
  ${BIN_PATH_ECHO} -n | ${BIN_PATH_OPENSSL} s_client -connect ${SERVER_HOSTNAME}:${SERVER_PORT_NUM} -servername ${SERVER_HOSTNAME} -showcerts 2>/dev/null | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p'
}

test_mtls_with_server(){
  # e.g: test_mtls_conn_with_server localhost 8081 DER /opt/spire-gateway/data/agent/agent_svid.der DER /opt/spire-gateway/data/agent/svid.key /opt/spire-gateway/data/agent/bundle.der
  SERVER_HOSTNAME=$1
  SERVER_PORT_NUM=$2
  CLIENT_CERT_FORMAT=$3
  CLIENT_CERT_FPATH=$4
  CLIENT_KEY_FORMAT=$5
  CLIENT_KEY_FPATH=$6
  CLIENT_CA_CERT_FPATH=$7
  ${BIN_PATH_ECHO} "Q" | ${BIN_PATH_SUDO} ${BIN_PATH_OPENSSL} s_client -connect ${SERVER_HOSTNAME}:${SERVER_PORT_NUM} -servername ${SERVER_HOSTNAME} -certform ${CLIENT_CERT_FORMAT}  -cert ${CLIENT_CERT_FPATH} -keyform ${CLIENT_KEY_FORMAT}  -key ${CLIENT_KEY_FPATH}  -CAfile ${CLIENT_CA_CERT_FPATH}
}

query_db(){
  # e.g: query_db 'SELECT entry.spiffe_id AS node_id,node.spiffe_id AS token_id,node.serial_number AS serial,node.updated_at AS starttime,node.expires_at AS endtime,node.created_at AS attested_at,entry.created_at AS registered_at FROM registered_entries AS entry  LEFT JOIN attested_node_entries AS node ON node.spiffe_id == entry.parent_id WHERE entry.spiffe_id NOT LIKE "%/apache" ORDER BY endtime ASC'
  QUERY=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_PYTHON3} "${_PY_SPIRE_DB}" --query "${QUERY}"
}

curl_2ctrl(){
  # GW=`jq -r .gateway_name /etc/localgateway/gateway.cfg` DOMAIN=`jq -r .cert_domain /etc/localgateway/gateway.cfg` && echo $GW.$DOMAIN; echo && sudo curl -v --cacert /usr/local/share/ca-certificates/ca.crt --cert /etc/ssl/certs/${GW}.crt --key /etc/ssl/private/${GW}.key https://controller.${DOMAIN}/cloudxaws/launch.py?action=test_msg_type -d type=test 2>&1 | grep "SSL certificate verify ok"
  GW=`${BIN_PATH_JQ} -r .gateway_name /etc/localgateway/gateway.cfg`
  DOMAIN=`${BIN_PATH_JQ} -r .cert_domain /etc/localgateway/gateway.cfg`
  ${BIN_PATH_ECHO} ${GW}.${DOMAIN}
  ENDPOINT=$1
  ${BIN_PATH_SUDO} ${BIN_PATH_CURL} --verbose --cacert /usr/local/share/ca-certificates/ca.crt --cert /etc/ssl/certs/${GW}.crt --key /etc/ssl/private/${GW}.key https://controller.${DOMAIN}/${ENDPOINT}
}

curl_2gw(){
  # GW='' DOMAIN=`jq -r .cert_domain /etc/localgateway/controller.cfg` && echo $GW.$DOMAIN; echo && sudo curl -v --cacert /usr/local/share/ca-certificates/ca.crt --cert /etc/ssl/certs/controller.crt --key /etc/ssl/private/controller.key https://${GW}.${DOMAIN}/cloudxaws/launch.py?action=test_msg_type -d type=test
  GW_ID=$1
  ENDPOINT=$2
  DOMAIN=`${BIN_PATH_JQ} -r .cert_domain /etc/localgateway/controller.cfg`
  ${BIN_PATH_ECHO} ${GW_ID}.${DOMAIN}
  ${BIN_PATH_SUDO} ${BIN_PATH_CURL} --verbose --cacert /usr/local/share/ca-certificates/ca.crt --cert /etc/ssl/certs/controller.crt --key /etc/ssl/private/controller.key -X GET https://${GW_ID}.${DOMAIN}/${ENDPOINT}
}

start_openssl_tls_server(){
  # e.g: start_openssl_tls_server 3000 PEM /etc/ssl/certs/controller.crt PEM /etc/ssl/private/controller.key /usr/local/share/ca-certificates/ca.crt
  SERVER_PORT_NUM=$1
  SERVER_CERT_FORMAT=$2
  SERVER_CERT_FPATH=$3
  SERVER_KEY_FORMAT=$4
  SERVER_KEY_FPATH=$5
  SERVER_CA_CERT_FPATH=$6
  ${BIN_PATH_SUDO} ${BIN_PATH_OPENSSL} s_server -accept ${SERVER_PORT_NUM} -certform ${SERVER_CERT_FORMAT} -cert ${SERVER_CERT_FPATH} -keyform ${SERVER_KEY_FORMAT} -key ${SERVER_KEY_FPATH} -CAfile ${SERVER_CA_CERT_FPATH} -state
}

test_htpdate_client(){
  # e.g: SSL_CERT_FILE=/etc/spire-gatew/server.crt /usr/sbin/htpdate -cdddst -p 1 https://time-server.avx.com:443/
  # e.g: test_htpdate_client time-server.avx.com 443 /etc/spire-gatew/server.crt 
  HTTPS_SERVER_HOSTNAME=$1
  HTTPS_SERVER_PORT_NUM=$2
  SSL_CERT_FPATH=$3
  SSL_CERT_FILE=${SSL_CERT_FPATH} ${BIN_PATH_HTPDATE} -cdddt -p 1 https://${HTTPS_SERVER_HOSTNAME}:${HTTPS_SERVER_PORT_NUM}/
}

unzip_gz(){
  ${BIN_PATH_GZIP} -dk $1
}

show_deattested(){
  ${BIN_PATH_ZGREP} --extended-regexp --only-matching  "Invalid argument: failed to attest: join token does not exist or has already been used\" caller-addr=\".*:" $1 | sort | uniq
}

split_ca_bundle(){
  ${BIN_PATH_CSPLIT} -z -f splitted-ca-cert $1  '/-----BEGIN CERTIFICATE-----/' '{*}'
}

decode_ca_bundle(){
  ${BIN_PATH_OPENSSL} crl2pkcs7 -nocrl -certfile $1 | ${BIN_PATH_OPENSSL} pkcs7 -print_certs -noout -text
}

